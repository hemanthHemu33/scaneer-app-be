import { toISTISOString } from './util.js';

export function buildSignal(context = {}, pattern = {}, tradeParams = {}, confidence = '') {
  const {
    symbol,
    instrumentToken,
    ma20Val,
    ma50Val,
    ema9,
    ema21,
    ema50,
    ema200,
    rsi,
    supertrend,
    atrValue,
    slippage,
    spread,
    liquidity,
    liveTick,
    depth,
    rrMultiplier,
    rvol,
    isUptrend,
    isDowntrend,
    strategyName,
    strategyConfidence,
    support,
    resistance,
    finalScore,
    expiresAt,
    riskAmount,
    accountBalance,
    baseRisk,
  } = context;

  const { entry, stopLoss, target1, target2, qty } = tradeParams;

  const generatedAt = toISTISOString();

  const signal = {
    stock: symbol,
    instrument_token: instrumentToken,
    pattern: pattern.type,
    strength: pattern.strength,
    direction: pattern.direction,
    entry: parseFloat(entry.toFixed(2)),
    stopLoss: parseFloat(stopLoss.toFixed(2)),
    target1: parseFloat(target1.toFixed(2)),
    target2: parseFloat(target2.toFixed(2)),
    qty,
    riskPerUnit: parseFloat(baseRisk.toFixed(2)),
    riskAmount: parseFloat(riskAmount.toFixed(2)),
    accountBalance: parseFloat(accountBalance.toFixed(2)),
    rsi: parseFloat(rsi.toFixed(2)),
    ma20: ma20Val !== null ? parseFloat(ma20Val.toFixed(2)) : null,
    ma50: ma50Val !== null ? parseFloat(ma50Val.toFixed(2)) : null,
    support: support !== null ? parseFloat(support.toFixed(2)) : null,
    resistance: resistance !== null ? parseFloat(resistance.toFixed(2)) : null,
    ema9: parseFloat(ema9.toFixed(2)),
    ema21: parseFloat(ema21.toFixed(2)),
    ema50: parseFloat(ema50.toFixed(2)),
    ema200: parseFloat(ema200.toFixed(2)),
    supertrend,
    atr: atrValue,
    slippage: parseFloat(slippage.toFixed(2)),
    spread: parseFloat(spread.toFixed(2)),
    liquidity,
    confidence,
    confidenceScore: finalScore,
    liveTickData: liveTick,
    depth,
    expiresAt: expiresAt ? toISTISOString(expiresAt) : undefined,
    generatedAt,
    source: 'analyzeCandles',
  };

  const advancedSignal = {
    signalId: `${symbol}-1m-${strategyName.replace(/\s+/g, '-')}-${toISTISOString().replace(/[:.-]/g, '')}`,
    symbol,
    timeframe: '1m',
    strategy: strategyName,
    side: pattern.direction === 'Long' ? 'buy' : 'sell',
    entry: signal.entry,
    stopLoss: signal.stopLoss,
    targets: [signal.target1, signal.target2],
    quantity: qty,
    risk: {
      rrRatio: parseFloat(rrMultiplier.toFixed(2)),
      slDistance: parseFloat(Math.abs(signal.entry - signal.stopLoss).toFixed(2)),
      capitalRequired: parseFloat((signal.entry * qty).toFixed(2)),
    },
    filters: {
      rvol: parseFloat(rvol.toFixed(2)),
      marketTrend: isUptrend ? 'bullish' : isDowntrend ? 'bearish' : 'sideways',
    },
    context: { volatility: atrValue.toFixed(2) },
    levels: { support, resistance },
    confidenceScore: strategyConfidence,
    executionWindow: {
      validFrom: generatedAt,
      validUntil: expiresAt ? toISTISOString(expiresAt) : undefined,
    },
    executionHint: {
      type: 'limitOrMarket',
      slippageTolerance: 0.05,
      broker: 'zerodha',
      strategyRef: `id:${strategyName.toLowerCase().replace(/\s+/g, '-')}`,
    },
    status: 'active',
    expiresAt: expiresAt ? toISTISOString(expiresAt) : undefined,
    autoCancelOn: [],
  };

  return { signal, advancedSignal };
}
